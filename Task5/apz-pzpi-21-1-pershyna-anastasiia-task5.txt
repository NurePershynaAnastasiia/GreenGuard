1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ

Для розробки мобільного додатку було вибрано мову програмування Kotlin. Вона пропонує безліч переваг, включаючи компактний і зрозумілий синтаксис, підтримку нульових посилань, безпеку типів та інші. У ролі середовища розробки було вибрано Android Studio. Це офіційне інтегроване середовище розробки (IDE) для платформи Android. Android Studio надає широкий спектр інструментів для розробки, налагодження та тестування Android-додатків.
Архітектура проєкту побудована за принципами Clean Architecture. Це дозволяє розділити відповідальності між різними частинами додатку та зробити його більш зрозумілим, масштабованим і тестованим.
Презентаційний шар включає activities та adapters. Тут відбувається взаємодія з користувачем та відображення даних.
Доменний шар містить бізнес-логіку додатку, яку у вас реалізовано у services. Сервіси взаємодіють із моделями та виконують основні операції, такі як отримання списків даних та їх оновлення.
Шар даних відповідає за доступ до даних і включає network. Тут реалізовано мережеві запити для отримання даних з сервера. Моделі (models) також можна віднести до цього шару, оскільки вони представляють структуру даних, що надходять з мережі.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Користувачами мобільного додатку є працівники компанії, що надає послуги догляду за рослинами. Діаграма прецедентів, яку наведено в додатку А, на рисунку А.1, зображує інформаційні потреби авторизованого та неавторизованого працівників. Неавторизований працівник може зробити єдину дію, а саме авторизуватись та ввести правильну адресу електронної пошти та пароль. Якщо система знайшла у базі даних працівника з такими даними автентифікації, то його статус змінюється із неавторизованого працівника на авторизованого, тим самим змінюючи його рівень доступу.
Система надає авторизованому працівнику доступ до низки функцій, які задовольнятимуть його потреби. Оскільки основною задачею працівника є догляд за рослинами, то він має доступ до списку наявних рослин, де він має змогу додавати, видаляти рослини та редагувати інформацію про них. Також користувач має доступ довідника шкідників і, за потреби, може додавати або видаляти шкідників з рослини. Працівник отримує свої робочі завдання від адміністратора, після чого він зобов’язаний змінити статус завдання, щоб повідомити про хід його виконання. Після виконання завдання працівник змінює статус завдання на «виконано». Для зручності, користувач окремо може переглянути список своїх завдань на сьогодні. Одним із типом завдань є внесення добрива до рослини, тому працівник може переглядати список добрив, додавати та видаляти їх та змінювати їхню наявну кількість. Щоб уникнути понаднормової роботи, працівник має змогу змінювати свої робочі дні та робочі години. Окрім цього, він може змінювати такі особисті дані, а саме ім’я, адреса електронної пошти та номер телефону.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
 
Для забезпечення розширених можливостей Kotlin у Android використовується core-ktx. Цей пакет забезпечує зручний та ефективний спосіб взаємодії з різними компонентами Android за допомогою Kotlin. Використання Kotlin разом з цим пакетом дозволяє писати більш чистий, компактний та безпечний код, що прискорює розробку та зменшує ймовірність помилок.
Для забезпечення підтримки старих версій Android та сумісності з сучасними функціями використовується пакет appcompat. Цей пакет дозволяє розробникам створювати додатки, які працюють на різних версіях Android, зберігаючи при цьому спільний вигляд і поведінку. Також він забезпечує однорідний інтерфейс для користувачів на різних версіях Android, що полегшує розробку та вдосконалює враження користувачів.
Для створення інтерфейсів користувача з використанням компонентів Material Design використовується пакет material. Використання компонентів Material Design спрощує створення привабливих і сучасних інтерфейсів, забезпечуючи при цьому однорідний вигляд додатків на різних платформах.
Для створення складних інтерфейсів користувача за допомогою обмежень використовується пакет constraintlayout. ConstraintLayout дозволяє розробникам створювати гнучкі та адаптивні макети інтерфейсу, які автоматично пристосовуються до різних розмірів екранів та пристроїв. Він забезпечує високий рівень контролю над розташуванням елементів інтерфейсу, що сприяє швидкому розробці та оптимізації додатків.
Для здійснення HTTP-запитів використовується бібліотека retrofit. Retrofit спрощує роботу з мережевими запитами, забезпечуючи високий рівень абстракції та підтримку різних форматів обміну даними.
Для здійснення мережевих запитів використовується HTTP клієнт okhttp. OkHttp надає швидкий та ефективний спосіб взаємодії з веб-службами через HTTP-запити. Він забезпечує швидку та надійну роботу з мережевими запитами, маючи при цьому простий та легкий у використанні інтерфейс.
Для декодування JSON Web Token (JWT) використовується бібліотека jwtdecode. Ця бібліотека надає зручний спосіб декодування та розшифрування JWT, що дозволяє перевіряти автентифікаційні та авторизаційні токени. Використання JWT спрощує реалізацію механізмів аутентифікації та авторизації в додатках, забезпечуючи безпеку та конфіденційність даних.
Діаграма пакетів (див. додаток Б, рисунок Б.1) була розроблена, щоб допомогти візуалізувати використані пакети. Діаграма пакетів дозволяє подивитися на проект як на сукупність модулів (пакетів), що спрощує розуміння структури проекту та взаємозв'язків між його компонентами.

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТ
 
Проєкт складається із компонент, які можна побачити у додатку В на рисунку В.1. Пакет activities містить основні екранні компоненти вашого додатку. Кожна активність відповідає за певний екран і взаємодію з користувачем. Наприклад, LoginActivity (див. додаток Д, Д.1) відповідає за екран для вхожу користувача в систему.
Пакет adapters містить адаптери для RecyclerView. Адаптери відповідають за відображення списків даних у RecyclerView. Наприклад, TaskAdapter відповідає за відображення списку завдань, а PestAdapter – за відображення списку шкідників.
Пакет models містить моделі даних. Моделі представляють структуру даних, що використовується в додатку. Наприклад, у вас є моделі для рослин (Plant) та шкідників (Pest).
Пакет network містить класи для роботи з мережею. Основний компонент тут – ApiService (див. додаток Д, Д.2), який відповідає за виконання мережевих запитів. Також тут є NetworkModule, який забезпечує налаштування мережевих підключень.
Пакет services містить сервіси, які забезпечують бізнес-логіку вашого додатку. Наприклад, TasksService відповідає за операції, пов'язані із завданнями, а PestsService (див. додаток Д, Д.3) - за операції, пов'язані зі шкідниками.
Пакет util містить допоміжні класи та утиліти. Наприклад, NavigationUtils містить методи для налаштування навігаційних компонентів.
	

5 ПОБУДОВА ДІАГРАМИ СТАНІВ

Було розроблено діаграму станів для працівника  (див. додаток. Г, рис. Г.1). Дана діаграма розроблена для відображення різних можливих станів системи, подій, які можуть призвести до переходів між цими станами, а також дій, які відбуваються у кожному з цих станів

ВИСНОВКИ

У ході лабораторної роботи було розроблено мобільну частину програмної системи GreenGuard.
