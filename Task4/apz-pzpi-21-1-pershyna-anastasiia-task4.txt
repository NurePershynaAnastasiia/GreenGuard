1 ОПИС АРХІТЕКТУРИ ВЕБ ЧАСТИНИ

Для розробки клієнтської частини використовувалися HTML, CSS та JavaScript. Взаємодія з сервером частково реалізована за допомогою Fetch API, що дозволяє виконувати асинхронні запити до серверу і відображати отримані дані на сторінці. Для роботи з HTML-документами безпосередньо застосовувався DOM API. Логіка була розподілена на функції, такі як виклик серверних операцій, отримання та відображення даних. Система побудована на основі RESTful API, який був використаний для розробки серверної частини на попередньому етапі роботи.
Проєкт реалізований за багатошаровою архітектурою що розділяє логіку додатка на різні рівні для покращення масштабованості, підтримки і розширюваності.
Рівень презентації відповідає за представлення користувачу. Він містить HTML сторінки, які описують структуру і зміст інтерфейсу користувача, CSS файли для стилізації, а також JS скрипти для обробки інтерфейсу користувача (UI). Кожен UI скрипт відповідає за роботу з відповідною HTML сторінкою.
Рівень логіки містить сервіси, які обробляють запити від UI, виконують логіку бізнесу та взаємодіють з сервером через API. Кожен сервіс відповідає за певний домен (наприклад, PlantService.js обробляє логіку, пов'язану з рослинами). 

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Користувачами вебсайту є адміністратори компанії, що надає послуги догляду за рослинами. Його діаграму прецедентів наведено в додатку А, на рисунку А.1. У даній системі адміністратор може отримати доступ до всіх функцій звичайного працівника, якщо використає мобільний додаток, а також доступ до функцій, пов’язаних із адмініструванням з вебсайту. Ці функції включають у себе доступ до редагування, додавання та видалення даних про рослини. Адміністратор повинен керувати працівниками, тому він має змогу переглянути список, змінити роль чи видалити працівників. Для зручності він також може отримувати розрахунок місячної заробітної плати робітника за допомогою використання математичної моделі. Ще одна важлива частина обов’язків адміністратора полягає у створенні завдань, тому система дозволяє йому переглядати, створювати, редагувати і видаляти завдання, а також додавати та видаляти працівників і рослини із завдань. Окрім цього, адміністратор повинен мати змогу керувати резервними копіями бази даних, а саме переглядати їх список, створювати чи завантажувати резервні копії. Можливість робити резервні копії даних є вкрай важливою, оскільки вона надає додатковий захист від втрати даних та можливість відновлення.

3 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТ

Проєкт складається із компонент, які можна побачити у додатку Б на рисунку Б.1. Користувач взаємодіє з веб-сторінкою і викликає різні дії (натискання кнопок, введення даних і т.д.). UI скрипти, наприклад PlantUI.js (див. додаток Д, Д1), обробляють ці дії, наприклад, збирають введені дані, перевіряють їх і викликають відповідні методи сервісів. Сервіси, наприклад PlantService.js (див. додаток Д, Д2), отримують запити від UI, виконують необхідну бізнес-логіку (наприклад, перевіряють правильність даних, роблять розрахунки) і взаємодіють з сервером через API для отримання або зміни даних.
Сервіси відправляють HTTP запити на сервер.Сервер обробляє ці запити і повертає відповідні дані або підтвердження успішного виконання операцій. Після отримання відповіді від сервера сервіси передають оновлені дані назад до UI. UI оновлює відповідні частини веб-сторінки, щоб відобразити нові дані або повідомлення про помилку/успішну операцію.

4 ПОБУДОВА ДІАГРАМИ СТАНІВ
 
Було розроблено діаграму станів для адміністратора (див. додаток. В, рис. В.1). Дана діаграма розроблена для відображення різних можливих станів системи, подій, які можуть призвести до переходів між цими станами, а також дій, які відбуваються у кожному з цих станів

5 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Було створено діаграму діяльності (див. додаток. Г, рис. Г.1) для моделювання робочих процесів та дій у системі. Вона дозволяє візуалізувати послідовність кроків, необхідних для виконання певної операції або процесу. Діаграма діяльності може бути корисною для розуміння і документування бізнес-процесів, робочих процесів, алгоритмів і взаємодій між компонентами системи.

ВИСНОВКИ

У ході лабораторної роботи було розроблено веб частину програмної системи GreenGuard
